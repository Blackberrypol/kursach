-- phpMyAdmin SQL Dump
-- version 5.1.0
-- https://www.phpmyadmin.net/
--
-- Хост: localhost
-- Время создания: Май 12 2021 г., 19:43
-- Версия сервера: 8.0.24
-- Версия PHP: 8.0.3

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `testsite`
--

-- --------------------------------------------------------

--
-- Структура таблицы `articles1`
--

CREATE TABLE `articles1` (
  `id` int NOT NULL,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `content` text CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_unicode_ci;

--
-- Дамп данных таблицы `articles1`
--

INSERT INTO `articles1` (`id`, `title`, `content`) VALUES
(2, 'Определение селектора', '<p><u><strong>Селектор</strong></u>&nbsp;- это часть CSS-правила, которая сообщает браузеру, к какому элементу (или элементам) веб-страницы будет применён стиль.</p>\r\n\r\n<p>Обратите внимание - не существует селекторов, которые бы позволили выбрать родителя (содержащий контейнер) или соседа родителя или потомков соседа родителя.</p>\r\n\r\n<p>Термин селектор может относиться к простому селектору (simple selector), составному селектору (compound selector), сложному селектору (complex selector) или списку селекторов.</p>\r\n\r\n<p>К&nbsp;простым селекторам&nbsp;относятся:</p>\r\n\r\n<ul>\r\n	<li>селектор типа</li>\r\n	<li>универсальный селектор</li>\r\n	<li>селекторы атрибутов</li>\r\n	<li>селектор идентификатора</li>\r\n	<li>селектор класса</li>\r\n	<li>псевдо-классы</li>\r\n</ul>\r\n'),
(3, 'Базовые селекторы', '<h2><u><span style=\"font-size:14px\">Универсальный селектор</span></u></h2>\r\n\r\n<p>Выбирает все элементы. По желанию, он может быть ограничен определённым пространством имён или относиться ко всему пространству имён.<br />\r\n<strong>Синтаксис:</strong>&nbsp;<code>*</code>&nbsp;<code><var>ns</var>|*</code>&nbsp;<code>*|*</code><br />\r\n<strong>Пример:</strong>&nbsp;<code>*</code>&nbsp;будет соответствовать всем элементам на странице.</p>\r\n\r\n<p><u><span style=\"font-size:14px\">Селекторы по типу элемента</span></u></p>\r\n\r\n<p>Этот базовый селектор выбирает тип элементов, к которым&nbsp;будет&nbsp;применяться правило.<br />\r\n<strong>Синтаксис:&nbsp;</strong><code><var>элемент</var></code><br />\r\n<strong>Пример:&nbsp;</strong>селектор<strong>&nbsp;</strong><code>input</code>&nbsp;выберет все элементы&nbsp;.</p>\r\n\r\n<p><u><span style=\"font-size:14px\">Селекторы по классу</span></u></p>\r\n\r\n<p>Этот базовый селектор выбирает элементы, основываясь на значении их атрибута&nbsp;<code>class</code>.<br />\r\n<strong>Синтаксис:&nbsp;</strong><code>.<em>имяКласса</em></code><br />\r\n<strong>Пример:&nbsp;</strong>селектор<strong>&nbsp;</strong><code>.index</code>&nbsp;выберет все элементы с соответствующим&nbsp;классом (который был определён в атрибуте&nbsp;<code>class=&quot;index&quot;</code>).</p>\r\n\r\n<p><u><span style=\"font-size:14px\">Селекторы по&nbsp;идентификатору</span></u></p>\r\n\r\n<p>Этот базовый селектор выбирает элементы, основываясь на значении их&nbsp;<code>id</code>&nbsp;атрибута. Не забывайте, что идентификатор&nbsp;должен быть уникальным, т. е. использоваться только для одного элемента в HTML-документе.&nbsp;<br />\r\n<strong>Синтаксис:&nbsp;</strong><code>#имяИдентификатора</code><br />\r\n<strong>Пример:&nbsp;</strong>селектор&nbsp;<code>#toc</code>&nbsp;выберет элемент с идентификатором&nbsp;toc (который был определён в атрибуте&nbsp;<code>id=&quot;toc&quot;</code>).</p>\r\n\r\n<p><span style=\"font-size:14px\"><u>Селекторы по атрибуту</u></span></p>\r\n\r\n<p>Этот селектор выбирает все элементы, имеющие данный атрибут или атрибут с определённым значением.<br />\r\n<strong>Синтаксис:</strong>&nbsp;<code>[attr] [attr=value] [attr~=value] [attr|=value] [attr^=value] [attr$=value] [attr*=value]</code><br />\r\n<strong>Пример:&nbsp;</strong>селектор&nbsp;<code>[autoplay]</code>&nbsp;выберет все элементы, у которых есть&nbsp; атрибут&nbsp;<code>autoplay</code>&nbsp;(независимо от его значения).<br />\r\n<strong>Ещё пример</strong>: a[href$=&quot;.jpg&quot;] выберет все ссылки, у которых адрес заканчивается на &quot;.jpg&quot;.<br />\r\n<strong>Ещё пример</strong>: a[href^=&quot;https&quot;] выберет все ссылки, у которых адрес начинается на &quot;https&quot;.</p>\r\n'),
(4, 'Комбинаторы', '<h2><u><span style=\"font-size:14px\">Комбинатор запятая</span></u></h2>\r\n\r\n<p>Комбинатор&nbsp;<code>,</code>&nbsp;это способ группировки, он выбирает все совпадающие узлы.<br />\r\n<strong>Синтаксис:</strong>&nbsp;<code><var>A</var>,&nbsp;<var>B</var></code><br />\r\n<strong>Пример:</strong>&nbsp;<code>div, span</code>&nbsp;выберет оба элемента - и&nbsp;<a href=\"https://developer.mozilla.org/ru/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a>&nbsp;и&nbsp;<a href=\"https://developer.mozilla.org/ru/docs/Web/HTML/Element/span\"><code>&lt;span&gt;</code></a>.</p>\r\n\r\n<p>Комбинатор потомков</p>\r\n\r\n<p>Комбинатор&nbsp;<code>&#39; &#39;</code>&nbsp;(пробел) выбирает элементы, которые находятся внутри указанного элемента (вне зависимости от уровня вложенности).<br />\r\n<strong>Синтаксис:</strong>&nbsp;<code>A B</code><br />\r\n<strong>Пример:&nbsp;</strong>селектор&nbsp;<code>div span</code>&nbsp;выберет все элементы&nbsp;<a href=\"https://developer.mozilla.org/ru/docs/Web/HTML/Element/span\"><code>&lt;span&gt;</code></a>, которые находятся внутри элемента&nbsp;<a href=\"https://developer.mozilla.org/ru/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a>.</p>\r\n\r\n<p>Дочерние&nbsp;селекторы</p>\r\n\r\n<p>Комбинатор&nbsp;<code>&#39;&gt;&#39;</code>&nbsp;в отличие от пробела выбирает только те элементы, которые являются дочерними непосредственно по отношению к указанному элементу.<br />\r\n<strong>Синтаксис:</strong>&nbsp;<code><var>A</var>&nbsp;&gt;&nbsp;<var>B</var></code><br />\r\n<strong>Пример:&nbsp;</strong>селектор<strong>&nbsp;</strong><code>ul &gt; li</code>&nbsp;выберет только дочерние элементы&nbsp;<a href=\"https://developer.mozilla.org/ru/docs/Web/HTML/Element/li\"><code>&lt;li&gt;</code></a>, которые находятся внутри, на первом уровне вложенности по отношению к элементу&nbsp;<a href=\"https://developer.mozilla.org/ru/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a>.</p>\r\n\r\n<p>Комбинатор всех соседних элементов</p>\r\n\r\n<p>Комбинатор&nbsp;<code>&#39;~&#39;</code>&nbsp;выбирает элементы, которые находятся на этом же уровне вложенности, после указанного элемента, с тем же родителем.<br />\r\n<strong>Синтаксис:</strong>&nbsp;<code><var>A</var>&nbsp;~&nbsp;<var>B</var></code><br />\r\n<strong>Пример:</strong>&nbsp;<code>p ~ span</code>&nbsp;выберет все элементы&nbsp;, которые находятся после элемента&nbsp;&nbsp;внутри одного родителя.</p>\r\n\r\n<p>Комбинатор следующего соседнего элемента</p>\r\n\r\n<p>Комбинатор&nbsp;<code>&#39;+&#39;</code>&nbsp;выбирает элемент, который&nbsp;находится непосредственно после указанного элемента, если у них общий родитель.<br />\r\n<strong>Синтаксис:</strong>&nbsp;<code><var>A</var>&nbsp;+&nbsp;<var>B</var></code><br />\r\n<strong>Пример:&nbsp;</strong>селектор&nbsp;<code>ul + li</code>&nbsp;выберет любой&nbsp;&nbsp;элемент, который &nbsp;находится непосредственно после элемента&nbsp;<a href=\"https://developer.mozilla.org/ru/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a>.</p>\r\n'),
(5, 'Псевдо', '<p><u>Псевдоклассы</u></p>\r\n\r\n<p>Знак&nbsp;<code>:</code>&nbsp;позволяет выбрать элементы, основываясь на информации, которой нет в дереве элементов.<br />\r\n<strong>Пример:&nbsp;</strong><code>a:visited</code>&nbsp;соответствует всем элементам&nbsp;&nbsp;которые имеют статус &quot;посещённые&quot;.<br />\r\n<strong>Ещё пример</strong>:&nbsp;<code>div:hover</code>&nbsp;соответствует элементу, над которым проходит указатель мыши.<br />\r\n<strong>Ещё пример</strong>:&nbsp;<code>input:focus</code>&nbsp;соответствует полю ввода, которое получило фокус.</p>\r\n\r\n<p><u>Псевдоэлементы</u></p>\r\n\r\n<p>Знак&nbsp;<code>::</code>&nbsp;позволяет выбрать вещи, которых нет в HTML.<br />\r\n<strong>Пример:</strong>&nbsp;<code>p::first-line</code>&nbsp;соответствует первой линии абзаца&nbsp;.</p>\r\n');

-- --------------------------------------------------------

--
-- Структура таблицы `articles2`
--

CREATE TABLE `articles2` (
  `id` int NOT NULL,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `content` text CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_unicode_ci;

--
-- Дамп данных таблицы `articles2`
--

INSERT INTO `articles2` (`id`, `title`, `content`) VALUES
(3, 'CSS-цвета', '<h3><span style=\"font-size:14px\"><strong>Приоритетные цвета: свойство color</strong></span></h3>\r\n\r\n<p><span style=\"font-size:12px\">Свойство задаёт цвет шрифта с помощью различных систем цветопередачи. Свойство описывает цвет текстового содержимого элемента. Кроме того, оно используется для предоставления потенциального косвенного значения (currentColor) для любых других свойств, которые принимают значения цвета.</span></p>\r\n\r\n<p><span style=\"font-size:12px\">Свойство наследуется.</span></p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th colspan=\"2\">&nbsp;</th>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\">Значения:</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\">цвет</span></td>\r\n			<td><span style=\"font-size:12px\">Задаётся с помощью значений цвета.</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>inherit</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">Наследует значение свойства от родительского элемента.</span></td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3><span style=\"font-size:12px\">2. Значения цвета</span></h3>\r\n\r\n<h4><span style=\"font-size:12px\">2.1. Основные ключевые слова</span></h4>\r\n\r\n<p><span style=\"font-size:12px\">Список основных ключевых слов включает в себя следующие значения:</span></p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><span style=\"font-size:12px\">Название</span></th>\r\n			<th><span style=\"font-size:12px\">HEX</span></th>\r\n			<th><span style=\"font-size:12px\">RGB</span></th>\r\n			<th>&nbsp;</th>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>black</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#000000</span></td>\r\n			<td><span style=\"font-size:12px\">0,0,0</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>silver</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#C0C0C0</span></td>\r\n			<td><span style=\"font-size:12px\">192,192,192</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>gray</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#808080</span></td>\r\n			<td><span style=\"font-size:12px\">128,128,128</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>white</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#FFFFFF</span></td>\r\n			<td><span style=\"font-size:12px\">255,255,255</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>maroon</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#800000</span></td>\r\n			<td><span style=\"font-size:12px\">128,0,0</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>red</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#FF0000</span></td>\r\n			<td><span style=\"font-size:12px\">255,0,0</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>purple</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#800080</span></td>\r\n			<td><span style=\"font-size:12px\">128,0,128</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>fuchsia</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#FF00FF</span></td>\r\n			<td><span style=\"font-size:12px\">255,0,255</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>green</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#008000</span></td>\r\n			<td><span style=\"font-size:12px\">0,128,0</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>lime</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#00FF00</span></td>\r\n			<td><span style=\"font-size:12px\">0,255,0</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>olive</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#808000</span></td>\r\n			<td><span style=\"font-size:12px\">128,128,0</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>yellow</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#FFFF00</span></td>\r\n			<td><span style=\"font-size:12px\">255,255,0</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>navy</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#000080</span></td>\r\n			<td><span style=\"font-size:12px\">0,0,128</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>blue</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#0000FF</span></td>\r\n			<td><span style=\"font-size:12px\">0,0,255</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>teal</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#008080</span></td>\r\n			<td><span style=\"font-size:12px\">0,128,128</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td><span style=\"font-size:12px\"><kbd>aqua</kbd></span></td>\r\n			<td><span style=\"font-size:12px\">#00FFFF</span></td>\r\n			<td><span style=\"font-size:12px\">0,255,255</span></td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><span style=\"font-size:12px\">Названия цветов не чувствительны к регистру.</span></p>\r\n\r\n<p><span style=\"font-size:12px\"><strong>Синтаксис</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:12px\"><code>color: teal;</code></span></pre>\r\n\r\n<p><span style=\"font-size:12px\">CSS</span></p>\r\n\r\n<h4><span style=\"font-size:12px\">2.2. Числовые значения цвета</span></h4>\r\n\r\n<h6><span style=\"font-size:12px\">2.2.1. Цвета модели RGB</span></h6>\r\n\r\n<p><span style=\"font-size:12px\">Формат значения RGB в шестнадцатеричном формате &mdash; это знак&nbsp;<kbd>#</kbd>, за которым сразу следуют три или шесть шестнадцатеричных символов. Трехзначная запись RGB&nbsp;<kbd>#rgb</kbd>&nbsp;преобразуется в шестизначную форму&nbsp;<kbd>#rrggbb</kbd>&nbsp;путем копирования цифр, а не путем добавления нулей. Например,&nbsp;<kbd>#fb0</kbd>&nbsp;расширяется до&nbsp;<kbd>#ffbb00</kbd>. Это гарантирует, что белый&nbsp;<kbd>#ffffff</kbd>&nbsp;может быть указан в короткой записи&nbsp;<kbd>#fff</kbd>, и удаляет любые зависимости от глубины цвета дисплея.</span></p>\r\n\r\n<p><span style=\"font-size:12px\">Формат значения RGB в функциональной нотации &mdash;&nbsp;<kbd>rgb(</kbd>, за которым следует разделенный запятыми список из трех числовых значений (либо трех целочисленных значений, либо трех процентных значений), за которыми следует символ&nbsp;<kbd>)</kbd>. Целочисленное значение&nbsp;<kbd>255</kbd>&nbsp;соответствует&nbsp;<kbd>100%</kbd>&nbsp;и&nbsp;<kbd>F</kbd>&nbsp;или&nbsp;<kbd>FF</kbd>&nbsp;в шестнадцатеричной записи:</span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:12px\">rgb (255,255,255) = rgb (100%, 100%, 100%) = #FFF</span></pre>\r\n\r\n<p><span style=\"font-size:12px\">Символы пробела допускаются вокруг числовых значений.</span></p>\r\n\r\n<p><span style=\"font-size:12px\">Все цвета&nbsp;&nbsp;указываются в цветовом пространстве sRGB. Пользовательские агенты могут различаться в точности, с которой они представляют эти цвета, но использование sRGB дает однозначное и объективно измеримое определение того, каким должен быть цвет.</span></p>\r\n\r\n<p><span style=\"font-size:12px\">Значения за пределами диапазона устройства должны быть обрезаны или отображены в известном диапазоне: значения красного, зеленого и синего необходимо изменить, чтобы они попадали в диапазон, поддерживаемый устройством. Некоторые устройства, например принтеры, имеют диапазоны, отличные от sRGB, поэтому некоторые цвета за пределами диапазона 0..255 sRGB будут представимы (внутри диапазона устройства) и будут отображаться.</span></p>\r\n'),
(4, 'Положение в CSS', '<h1><strong><span style=\"font-size:14px\">CSS: Выравнивание текста</span></strong></h1>\r\n\r\n<p><span style=\"font-size:12px\">По умолчанию текст на веб-страницах выровнен по левому краю элемента, в котором он располагается, однако используя&nbsp;<a href=\"https://puzzleweb.ru/css/pr_text-align.php\" title=\"задает горизонтальное выравнивание\">свойство text-align</a>, можно переопределить, как будут выравниваться строки текста относительно границ элемента. Рассмотрим каждое из возможных значений:</span></p>\r\n\r\n<ul>\r\n	<li><span style=\"font-size:12px\">left&nbsp;- выравнивает текст по левому краю.</span></li>\r\n	<li><span style=\"font-size:12px\">right&nbsp;- выравнивает текст по правому краю.</span></li>\r\n	<li><span style=\"font-size:12px\">center&nbsp;- выравнивает текст по центру.</span></li>\r\n	<li><span style=\"font-size:12px\">justify&nbsp;- выравнивает текст по ширине, в таком тексте оба конца строки размещаются вплотную к внутренним краям элемента. Пробелы между словами в этом случае корректируются браузером так, что бы длина всех строк была строго одинаковая.</span></li>\r\n</ul>\r\n'),
(5, 'Поток в CSS', '<h1><strong><span style=\"font-size:14px\">CSS: Выравнивание текста</span></strong></h1>\r\n\r\n<p><span style=\"font-size:12px\">По умолчанию текст на веб-страницах выровнен по левому краю элемента, в котором он располагается, однако используя&nbsp; задает горизонтальное выравнивание свойство text-align, можно переопределить, как будут выравниваться строки текста относительно границ элемента. Рассмотрим каждое из возможных значений:</span></p>\r\n\r\n<ul>\r\n	<li><span style=\"font-size:12px\">left&nbsp;- выравнивает текст по левому краю.</span></li>\r\n	<li><span style=\"font-size:12px\">right&nbsp;- выравнивает текст по правому краю.</span></li>\r\n	<li><span style=\"font-size:12px\">center&nbsp;- выравнивает текст по центру.</span></li>\r\n	<li><span style=\"font-size:12px\">justify&nbsp;- выравнивает текст по ширине, в таком тексте оба конца строки размещаются вплотную к внутренним краям элемента. Пробелы между словами в этом случае корректируются браузером так, что бы длина всех строк была строго одинаковая.</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:12px\">Значение&nbsp;absolute&nbsp;свойства&nbsp;position&nbsp;также выводит элемент из потока, но в отличие от&nbsp;fixed&nbsp;слой прокручивается вместе с содержимым. Кроме этого, существенное влияние на позицию оказывают свойства родителя. Возможны два основных варианта.</span></p>\r\n\r\n<ol>\r\n	<li><span style=\"font-size:12px\">Родитель отсутствует (его роль выполняет&nbsp;</span></li>\r\n	<li><span style=\"font-size:12px\">У родителя элемента установлено свойство&nbsp;position&nbsp;в значении&nbsp;absolute&nbsp;или&nbsp;relative.</span></li>\r\n</ol>\r\n\r\n<p><span style=\"font-size:12px\">В первом случае все просто,&nbsp; за исключением того, что не закрепляется строго на одном месте, а может прокручиваться одновременно со страницей. Во втором варианте положение элемента задаётся относительно родителя.</span></p>\r\n\r\n<p><span style=\"font-size:12px\">Во втором случае оздаётся два вложенных слоя с абсолютным позиционированием. Координаты первого слоя&nbsp;layer1&nbsp;задаются относительно окна браузера, координаты второго слоя&nbsp;layer2&nbsp;относительно границ слоя&nbsp;layer1.</span></p>\r\n\r\n<p><strong><span style=\"font-size:14px\">Использование float</span></strong></p>\r\n\r\n<p><span style=\"font-size:12px\">Свойство&nbsp;float&nbsp;превращает элемент в плавающий, при этом он прижимается к левому или правому краю родителя, а текст его обходит с других сторон. Такое поведение текста напоминает поток воды, обтекающий камень, поэтому элементы с таким поведением и называются плавающими. В отличие от абсолютно позиционированных плавающие элементы не обладают властью над координатами, их не получится заставить встать в точно заданную точку, но они имеют ряд примечательных характеристик. Настолько, что свойство&nbsp;float&nbsp;для вёрстки стало использоваться повсеместно. Перечислим лишь ряд возможных приложений:</span></p>\r\n\r\n<ul>\r\n	<li><span style=\"font-size:12px\">галереи небольших фотографий;</span></li>\r\n	<li><span style=\"font-size:12px\">двух и трёхколоночные макеты;</span></li>\r\n	<li><span style=\"font-size:12px\">горизонтальные меню;</span></li>\r\n	<li><span style=\"font-size:12px\">иллюстрации в тексте;</span></li>\r\n	<li><span style=\"font-size:12px\">многоколоночный текст.</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:12px\">Свойство&nbsp;float&nbsp;лишь частично влияет на элемент в потоке. Можно управлять положением по горизонтали, меняя значение&nbsp;float&nbsp;с&nbsp;right&nbsp;на&nbsp;left, но по вертикали положение элемента задаётся его местом в коде.</span></p>\r\n\r\n<div>\r\n<div>\r\n<p><strong>&nbsp;</strong></p>\r\n</div>\r\n</div>\r\n'),
(6, 'Коробочная модель CSS', '<h2><span style=\"font-size:14px\">Что такое блочная модель?</span></h2>\r\n\r\n<p><span style=\"font-size:12px\">Начнем с&nbsp;<strong>блочной модели в CSS</strong>. Ее также называют&nbsp;<strong>боксовой</strong>&nbsp;(или&nbsp;<strong>коробочной</strong>), так как в английском языке слово box означает &laquo;коробка&raquo;. На своих экранах (внизу этой статьи есть скрины из видеоурока) вы видите боксовую модель. В чем ее смысл? В самом центре находится текст. Мы знаем, что к тексту, как и к изображению, можно применить&nbsp;<strong>рамку</strong>, что и делает свойство border. А вот что же такое внутренний и внешний отступы, мы разберем в этом видеоуроке.</span></p>\r\n\r\n<h3><strong><span style=\"font-size:12px\">Свойства padding и margin</span></strong></h3>\r\n\r\n<p><span style=\"font-size:12px\">Разберемся с теорией. Padding &ndash; это свойство, задающее расстояние между текстом и рамкой, а margin &ndash; свойство, задающее расстояние между рамкой и внешними объектами. Благодаря этим свойствам, мы можем очень точно управлять элементами на странице.&nbsp;</span></p>\r\n\r\n<p><strong><span style=\"font-size:12px\">Рамка (свойство border)</span></strong></p>\r\n\r\n<p><span style=\"font-size:12px\">Теперь разберемся со свойством border (рамка). Border &ndash; свойство записанное в сокращенной форме. Давайте сначала запишем его в полной форме.</span></p>\r\n\r\n<p><span style=\"font-size:12px\">Первое свойство &mdash; border-width (ширина рамки). Что такое ширина рамки? Это ширина той красной области, которую вы видите на экране. Ее значение может быть как в абсолютных, так и в относительных величинах. Давайте поставим, например, 3 пикселя.</span></p>\r\n\r\n<p><span style=\"font-size:12px\">Следующее свойство &mdash; border-style (стиль рамки). Их восемь штук: dotted, dashed, solid, double, groove, ridge, inset, outset. Наиболее часто используются только первые четыре. Dotted &ndash; это рамка точками. Dashed &ndash; рамка штрихами. Solid &ndash; сплошная рамка. Double &ndash; двойная рамка. Остальные стили рамки вы можете применить и посмотреть результаты уже на собственном экране. Давайте поставим dotted.</span></p>\r\n\r\n<p><strong><span style=\"font-size:12px\">Внутренние и внешние отступы (padding и margin)</span></strong></p>\r\n\r\n<p><span style=\"font-size:12px\">Разберемся с&nbsp;<strong>внутренними и внешними отступами</strong>:&nbsp;<strong>padding</strong>&nbsp;и&nbsp;<strong>margin</strong>.Но сначала посмотрим снова на нашу боксовую модель. Напомню еще раз: свойство&nbsp;<strong>padding</strong>&nbsp;&ndash; это расстояние между текстом и рамкой border, а свойство&nbsp;<strong>margin</strong>&nbsp;&ndash; это расстояние между рамкой border и другими элементами.</span></p>\r\n\r\n<h3><strong><span style=\"font-size:12px\">Внутренние отступы (padding)</span></strong></h3>\r\n\r\n<p><span style=\"font-size:12px\">Сначала разберемся с внутренним отступом &mdash; со свойством padding. Padding &ndash; это тоже свойство, записанное в сокращенной форме. В полное форме оно записывается как padding-top, padding-right, padding-bottom и padding-left. Значения указываются в абсолютной или относительной величине. Все это складывается в свойство padding &ndash; сокращенную форму. Чтобы было проще, представьте себе круглые часы. Их можно разделить на 4 части. Первая часть находится вверху, вторая &mdash; справа, третья &mdash; внизу, четвертая &mdash; слева. В таком же порядке записываются и свойства padding и margin. Если отступ должен быть везде одинаков, то указывается только одно значение. Если же отступы сверху и снизу, а также справа и слева одинаковы, то указывается сначала отступ сверху, а потом отступ справа &mdash; всего два значения. </span></p>\r\n\r\n<h3><strong><span style=\"font-size:12px\">Внешние отступы (margin)</span></strong></h3>\r\n\r\n<p><span style=\"font-size:12px\">Теперь пришло время разобраться с&nbsp;<strong>внешними отступами</strong>. Внешний отступ &mdash; это отступ рамки до внешних элементов. Браузер изначально задает свои внутренние и внешние отступы. Чтобы это исключить, можно в самом верху описать свойства для всех классов, то есть для всех элементов. Это прописывается так: сначала идет &laquo;*&raquo;, потом открываются фигурные скобки, а дальше прописывается как обычный класс: padding: 0; margin: 0 .</span></p>\r\n\r\n<p>&nbsp;</p>\r\n'),
(7, 'Единицы измерения CSS', '<p><span style=\"font-size:12px\">В CSS есть разные единицы измерения. Больше всего известны пиксели, но есть и другие &ndash; не такие популярные, но весьма удобные в некоторых случаях.</span></p>\r\n\r\n<p><span style=\"font-size:12px\">В этой статье мы рассмотрим относительные и абсолютные единицы измерения, а также единицы измерения области просмотра (viewport-единицы).</span></p>\r\n\r\n<h2><strong><span style=\"font-size:14px\">Относительные единицы измерения</span></strong></h2>\r\n\r\n<p><span style=\"font-size:12px\">Размеры в CSS&nbsp;можно указывать не только в абсолютных единицах, таких как пиксели, поинты или сантиметры, но и в относительных &ndash; в процентах, em или rem. Использование относительных единиц измерения также помогает придерживаться стандартов доступности.</span></p>\r\n\r\n<p><span style=\"font-size:12px\">В большинстве браузеров по умолчанию установлен размер шрифта 16px. Это значение можно использовать при расчетах (например, 16px равны 1em, 1rem или 100%).</span></p>\r\n\r\n<p><span style=\"font-size:12px\">Давайте рассмотрим, какие же относительные единицы измерения у нас есть.</span></p>\r\n\r\n<ul>\r\n	<li><span style=\"font-size:12px\">% &ndash; измерение в процентах.</span></li>\r\n	<li><span style=\"font-size:12px\">em &ndash; размер шрифта относительно обычного, т.&nbsp;е., если шрифт имеет размер 2.5em, значит, он в 2,5 раза больше обычного шрифта.</span></li>\r\n	<li><span style=\"font-size:12px\">rem &ndash; размер шрифта относительно корневого элемента документа.</span></li>\r\n	<li><span style=\"font-size:12px\">ch &ndash; ширина символа &laquo;0&raquo;. В моноширинных шрифтах, где все символы имеют одинаковую ширину, 1ch это ширина одного символа.</span></li>\r\n	<li><span style=\"font-size:12px\">ex &ndash; x-высота текущего шрифта, измеряется в высоте символа &laquo;х&raquo; в нижнем регистре.</span></li>\r\n</ul>\r\n\r\n<h3><strong><span style=\"font-size:14px\">Чем отличаются em и rem?</span></strong></h3>\r\n\r\n<p><span style=\"font-size:12px\">Разница между этими единицами в наследовании. Значение rem основывается на&nbsp;<em>корневом</em>&nbsp;элементе (html). Каждый дочерний элемент в качестве основы для вычислений использует размер шрифта элемента html.</span></p>\r\n\r\n<p><span style=\"font-size:12px\">А в единицах em вычисления основаны на размере шрифта&nbsp;<em>родительского</em>&nbsp;элемента.</span></p>\r\n\r\n<p><span style=\"font-size:12px\">rem очень упрощает вычисления размеров шрифтов. Если размер шрифта в элементе не зависит от размера шрифта родителя, это очень удобно, например, для вложенных элементов или даже нескольких вложенных элементов, таких как списки. Единицы rem всегда вычисляются относительно размера шрифта в теге html.</span></p>\r\n\r\n<h2><strong><span style=\"font-size:14px\">Абсолютные единицы измерения</span></strong></h2>\r\n\r\n<p><span style=\"font-size:12px\">Абсолютные единицы измерения имеют фиксированный размер (нельзя же принять какой-то свой размер сантиметра). Если в вашем случае требуется указать точную длину, вам нужны абсолютные единицы измерения. Например, это подходит для элементов, размер которых не должен меняться. Также абсолютные единицы могут быть полезны, если вы хотите определить ограничения для каких-то областей, чтобы они не могли стать слишком широкими или слишком узкими. Те элементы, размеры которых вы задаете в абсолютных величинах, не меняются в зависимости от размеров экрана, ориентации в пространстве и прочих вещей.</span></p>\r\n\r\n<ul>\r\n	<li><span style=\"font-size:12px\">cm &ndash; сантиметры. 1 cm = 1 cm</span></li>\r\n	<li><span style=\"font-size:12px\">mm &ndash; миллиметры. 10 mm = 1 cm</span></li>\r\n	<li><span style=\"font-size:12px\">in &ndash; дюймы (inches). 1 in = 96px = 2.54 cm</span></li>\r\n	<li><span style=\"font-size:12px\">px &ndash; пиксели. 1 px = 1/96 от 1 in</span></li>\r\n	<li><span style=\"font-size:12px\">pt &ndash; поинты (points). 1 pt = 1/72 от 1 in</span></li>\r\n	<li><span style=\"font-size:12px\">pc &ndash; пайки (пики, англ. pica). 1pc = 12 pt</span></li>\r\n</ul>\r\n\r\n<h2><strong><span style=\"font-size:14px\">Единицы измерения области просмотра (viewport-единицы)</span></strong></h2>\r\n\r\n<p><span style=\"font-size:12px\">Viewport-единицы представляют собой процентное отношение к текущей величине области просмотра браузера. От простого выражения в процентах viewport-единицы отличаются тем, что они всегда высчитываются на основе&nbsp;<em>текущего</em>&nbsp;размера области просмотра. А размер, выраженный просто в процентах, вычисляется по отношению к родительскому элементу.</span></p>\r\n\r\n<ul>\r\n	<li><span style=\"font-size:12px\">vw &ndash; 1% от ширины области просмотра (50% это половина ширины области просмотра).</span></li>\r\n	<li><span style=\"font-size:12px\">vh &ndash; 1% от высоты области просмотра (50% это половина высоты области просмотра).</span></li>\r\n	<li><span style=\"font-size:12px\">vmin &ndash; 1%&nbsp;<em>от&nbsp;</em><em>меньшего размера</em>&nbsp;ширины или высоты области просмотра (т.&nbsp;е., если ширина&nbsp;<em>меньше</em>&nbsp;высоты, то vmin рассчитывается от ширины, при этом 1 vmin = 1 vw).</span></li>\r\n	<li><span style=\"font-size:12px\">vmax &ndash; 1%&nbsp;<em>от&nbsp;</em><em>большего размера</em>&nbsp;ширины или высоты области просмотра (т.&nbsp;е., если высота&nbsp;<em>больше</em>&nbsp;ширины, то vmax рассчитывается от высоты, при этом 1 vmax = 1 vh).</span></li>\r\n</ul>\r\n');

-- --------------------------------------------------------

--
-- Структура таблицы `articles3`
--

CREATE TABLE `articles3` (
  `id` int NOT NULL,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `content` text COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_unicode_ci;

--
-- Дамп данных таблицы `articles3`
--

INSERT INTO `articles3` (`id`, `title`, `content`) VALUES
(1, 'Наследование', '<p>Начнем с самой простой для понимания концепции CSS. Суть ее состоит в том, что стили, присвоенные некоторому элементу,&nbsp;<strong>наследуются</strong>&nbsp;всеми потомками (вложенными элементами), если они не переопределены явно. Например, размер шрифта и его цвет достаточно применить к дескриптору body чтобы все элементы внутри имели те же свойства. Но, для заголовков h1-h6 размер шрифта не будет присвоен, потому что у браузера для них есть своя таблица стилей по умолчанию, а наследованные стили имеют самый низкий приоритет. Аналогичная ситуация с цветом ссылок.</p>\r\n\r\n<p>Таким образом, наследование позволяет сократить таблицу CSS. Но в то же время если стилей много, то отследить какой родительский элемент установил некоторое свойство, становится довольно сложно.</p>\r\n'),
(2, 'Каскадирование', '<p>Правила каскадирования позволяют разрешать ситуации, когда для одного элемента прописано несколько стилей.&nbsp;<strong>Каскадирование&nbsp;</strong>основано на присвоении некоторого приоритета каждому правилу. Авторские таблицы стилей имеют самый большой приоритет, меньший &mdash; пользовательские, самый низкий &mdash; таблицы стилей по умолчанию браузера. У пользователя есть возможность переопределить авторское правило путем добавления флага !important к своему.</p>\r\n\r\n<p>Правила каскадирования определяют следующие приоритеты:</p>\r\n\r\n<ol>\r\n	<li>пользовательские стили, отмеченные !important</li>\r\n	<li>авторские стили, отмеченные !important</li>\r\n	<li>авторские стили</li>\r\n	<li>пользовательские стили</li>\r\n	<li>стили по умолчанию</li>\r\n</ol>\r\n\r\n<p>После каскадирования правила упорядочиваются на основе специфичности селекторов.</p>\r\n'),
(3, 'Специфичность', '<p>Специфичность &mdash; это некоторое число в системе с неопределенно высоким основанием, которое является отражением приоритета какого-либо правила. Вычисляется оно на основе&nbsp;<strong>специфичности</strong>&nbsp;каждого из селекторов, входящих в правило CSS.</p>\r\n\r\n<p>Специфичность селектора разбивается на 4 группы &mdash; a b c d:</p>\r\n\r\n<ul>\r\n	<li>если стиль встроенный, т.е. определен как style=&quot;&quot;, то а=1</li>\r\n	<li>значение b равно количеству селекторов идентификаторов</li>\r\n	<li>значение c равно количеству классов, псевдоклассов и селекторов атрибутов</li>\r\n	<li>значение d равно количеству селекторов типов</li>\r\n</ul>\r\n\r\n<p>Пример вычисления специфичности:</p>\r\n\r\n<table>\r\n	<thead>\r\n		<tr>\r\n			<th>Селектор</th>\r\n			<th>Специфичность</th>\r\n			<th>Специфичность в системе<br />\r\n			с основанием 10</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td>Style=&quot;&quot;</td>\r\n			<td>1,0,0,0</td>\r\n			<td>1000</td>\r\n		</tr>\r\n		<tr>\r\n			<td>#wrapper #content {}</td>\r\n			<td>0,2,0,0</td>\r\n			<td>200</td>\r\n		</tr>\r\n		<tr>\r\n			<td>#content .datePosted {}</td>\r\n			<td>0,1,1,0</td>\r\n			<td>110</td>\r\n		</tr>\r\n		<tr>\r\n			<td>div#content {}</td>\r\n			<td>0,1,0,1</td>\r\n			<td>101</td>\r\n		</tr>\r\n		<tr>\r\n			<td>#content {}</td>\r\n			<td>0,1,0,0</td>\r\n			<td>100</td>\r\n		</tr>\r\n		<tr>\r\n			<td>p.comment .datePosted {}</td>\r\n			<td>0,0,2,1</td>\r\n			<td>21</td>\r\n		</tr>\r\n		<tr>\r\n			<td>p.comment {}</td>\r\n			<td>0,0,1,1</td>\r\n			<td>11</td>\r\n		</tr>\r\n		<tr>\r\n			<td>div p {}</td>\r\n			<td>0,0,0,2</td>\r\n			<td>2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>p {}</td>\r\n			<td>0,0,0,1</td>\r\n			<td>1</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>Неопределенно высокое основание системы счисления является следствием того, что неизвестно заранее, насколько большими будут числа a, b, c, d. Если они меньше 10, то удобно использовать десятичную СС.</p>\r\n\r\n<p>Некоторые особенности:</p>\r\n\r\n<ul>\r\n	<li>если два правила имеют одинаковую специфичность, то приоритетным становится правило, определенное последним</li>\r\n	<li>наследованные стили имеют нулевую специфичность</li>\r\n</ul>\r\n');

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `id` int NOT NULL,
  `first_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `last_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `email` varchar(100) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `email_status` tinyint(1) NOT NULL DEFAULT '0',
  `password` varchar(100) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_unicode_ci;

--
-- Дамп данных таблицы `users`
--

INSERT INTO `users` (`id`, `first_name`, `last_name`, `email`, `email_status`, `password`) VALUES
(3, 'Полина', 'Горбачева', 'gorbacheva-polina01@mail.ru', 0, '4828140403f6eaee3b5af62a0b09ae61'),
(4, 'Петр', 'Первый', 'petr@mail.ru', 0, '4828140403f6eaee3b5af62a0b09ae61'),
(5, 'Nikki', 'Blackberry', 'niiki@mail.ru', 0, '08328fb45f8471397ca6142961fa4c13'),
(6, 'Полина', 'Горбачева', 'gorbacheva-polina0@mail.ru', 0, '76c09b279da46759c6ec89b225be6f57');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `articles1`
--
ALTER TABLE `articles1`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `articles2`
--
ALTER TABLE `articles2`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `articles3`
--
ALTER TABLE `articles3`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `email` (`email`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `articles1`
--
ALTER TABLE `articles1`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- AUTO_INCREMENT для таблицы `articles2`
--
ALTER TABLE `articles2`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT для таблицы `articles3`
--
ALTER TABLE `articles3`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
